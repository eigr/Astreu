syntax = "proto3";

option csharp_namespace = "Io.Eigr.Astreu.Consumer";

option java_multiple_files = true;
option java_package = "io.eigr.astreu.consumer";
option java_outer_classname = "SubscriberProto";

option optimize_for = SPEED;

package astreu.consumer;

import "protocol/protocol.proto";
import "google/protobuf/empty.proto";

/*
 * This service defines methods to be used by consumers to subscribe to a topic and receive messages for it. 
*/
service Subscriber {

    /*
     * This method is used to receive messages that have been produced for a given topic.
     *  An exchange of typical messages for a consumer to connect to the broker and receive messages should be as follows:
     *      1. The customer starts by sending a message of type System that contains an internal message of type Connect, 
     *         which in turn indicates all the desired settings through their attributes (see Connect and System).
     *      2. The client is waiting for messages from the server.
     *      3. The server validates whether the client can connect and, if so, starts forwarding messages that are produced to the topic of interest. 
     *         If not, a System message containing an internal Failure message will be sent by the server 
     *         to the client informing the reason for the failure (see Failure and System).
     *      4. For each message received, the client must send a Messgae message containing the Ack confirming or rejecting the message.
    */
    rpc Subscribe(stream astreu.protocol.Message) returns (stream astreu.protocol.Message) {}


    rpc Unsubscribe(astreu.protocol.Message) returns (google.protobuf.Empty) {}
}
 